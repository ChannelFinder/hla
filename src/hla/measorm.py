#!/usr/bin/env python

"""Response Matrix Measurement
   ----------------------------------

   :author: Lingyun Yang
   :license:

"""

import hla.conf as conf
import cadict

import os, sys, time
from os.path import join
from cothread.catools import caget, caput
import numpy as np
import matplotlib.pylab as plt

bpmpv = [
    ["SR:C30-BI:G02A<BPM:H1>Pos-X", "SR:C30-BI:G02A<BPM:H1>Pos-Y"],
    ["SR:C30-BI:G02A<BPM:H2>Pos-X", "SR:C30-BI:G02A<BPM:H2>Pos-Y"],
    ["SR:C30-BI:G04A<BPM:M1>Pos-X", "SR:C30-BI:G04A<BPM:M1>Pos-Y"],
    ["SR:C30-BI:G04B<BPM:M1>Pos-X", "SR:C30-BI:G04B<BPM:M1>Pos-Y"],
    ["SR:C30-BI:G06B<BPM:L2>Pos-X", "SR:C30-BI:G06B<BPM:L2>Pos-Y"],
    ["SR:C30-BI:G06B<BPM:L1>Pos-X", "SR:C30-BI:G06B<BPM:L1>Pos-Y"],
    ["SR:C01-BI:G02A<BPM:L1>Pos-X", "SR:C01-BI:G02A<BPM:L1>Pos-Y"],
    ["SR:C01-BI:G02A<BPM:L2>Pos-X", "SR:C01-BI:G02A<BPM:L2>Pos-Y"],
    ["SR:C01-BI:G04A<BPM:M1>Pos-X", "SR:C01-BI:G04A<BPM:M1>Pos-Y"],
    ["SR:C01-BI:G04B<BPM:M1>Pos-X", "SR:C01-BI:G04B<BPM:M1>Pos-Y"],
    ["SR:C01-BI:G06B<BPM:H2>Pos-X", "SR:C01-BI:G06B<BPM:H2>Pos-Y"],
    ["SR:C01-BI:G06B<BPM:H1>Pos-X", "SR:C01-BI:G06B<BPM:H1>Pos-Y"],
    ["SR:C02-BI:G02A<BPM:H1>Pos-X", "SR:C02-BI:G02A<BPM:H1>Pos-Y"],
    ["SR:C02-BI:G02A<BPM:H2>Pos-X", "SR:C02-BI:G02A<BPM:H2>Pos-Y"],
    ["SR:C02-BI:G04A<BPM:M1>Pos-X", "SR:C02-BI:G04A<BPM:M1>Pos-Y"],
    ["SR:C02-BI:G04B<BPM:M1>Pos-X", "SR:C02-BI:G04B<BPM:M1>Pos-Y"],
    ["SR:C02-BI:G06B<BPM:L2>Pos-X", "SR:C02-BI:G06B<BPM:L2>Pos-Y"],
    ["SR:C02-BI:G06B<BPM:L1>Pos-X", "SR:C02-BI:G06B<BPM:L1>Pos-Y"],
    ["SR:C03-BI:G02A<BPM:L1>Pos-X", "SR:C03-BI:G02A<BPM:L1>Pos-Y"],
    ["SR:C03-BI:G02A<BPM:L2>Pos-X", "SR:C03-BI:G02A<BPM:L2>Pos-Y"],
    ["SR:C03-BI:G04A<BPM:M1>Pos-X", "SR:C03-BI:G04A<BPM:M1>Pos-Y"],
    ["SR:C03-BI:G04B<BPM:M1>Pos-X", "SR:C03-BI:G04B<BPM:M1>Pos-Y"],
    ["SR:C03-BI:G06B<BPM:H2>Pos-X", "SR:C03-BI:G06B<BPM:H2>Pos-Y"],
    ["SR:C03-BI:G06B<BPM:H1>Pos-X", "SR:C03-BI:G06B<BPM:H1>Pos-Y"],
    ["SR:C04-BI:G02A<BPM:H1>Pos-X", "SR:C04-BI:G02A<BPM:H1>Pos-Y"],
    ["SR:C04-BI:G02A<BPM:H2>Pos-X", "SR:C04-BI:G02A<BPM:H2>Pos-Y"],
    ["SR:C04-BI:G04A<BPM:M1>Pos-X", "SR:C04-BI:G04A<BPM:M1>Pos-Y"],
    ["SR:C04-BI:G04B<BPM:M1>Pos-X", "SR:C04-BI:G04B<BPM:M1>Pos-Y"],
    ["SR:C04-BI:G06B<BPM:L2>Pos-X", "SR:C04-BI:G06B<BPM:L2>Pos-Y"],
    ["SR:C04-BI:G06B<BPM:L1>Pos-X", "SR:C04-BI:G06B<BPM:L1>Pos-Y"],
    ["SR:C05-BI:G02A<BPM:L1>Pos-X", "SR:C05-BI:G02A<BPM:L1>Pos-Y"],
    ["SR:C05-BI:G02A<BPM:L2>Pos-X", "SR:C05-BI:G02A<BPM:L2>Pos-Y"],
    ["SR:C05-BI:G04A<BPM:M1>Pos-X", "SR:C05-BI:G04A<BPM:M1>Pos-Y"],
    ["SR:C05-BI:G04B<BPM:M1>Pos-X", "SR:C05-BI:G04B<BPM:M1>Pos-Y"],
    ["SR:C05-BI:G06B<BPM:H2>Pos-X", "SR:C05-BI:G06B<BPM:H2>Pos-Y"],
    ["SR:C05-BI:G06B<BPM:H1>Pos-X", "SR:C05-BI:G06B<BPM:H1>Pos-Y"],
    ["SR:C06-BI:G02A<BPM:H1>Pos-X", "SR:C06-BI:G02A<BPM:H1>Pos-Y"],
    ["SR:C06-BI:G02A<BPM:H2>Pos-X", "SR:C06-BI:G02A<BPM:H2>Pos-Y"],
    ["SR:C06-BI:G04A<BPM:M1>Pos-X", "SR:C06-BI:G04A<BPM:M1>Pos-Y"],
    ["SR:C06-BI:G04B<BPM:M1>Pos-X", "SR:C06-BI:G04B<BPM:M1>Pos-Y"],
    ["SR:C06-BI:G06B<BPM:L2>Pos-X", "SR:C06-BI:G06B<BPM:L2>Pos-Y"],
    ["SR:C06-BI:G06B<BPM:L1>Pos-X", "SR:C06-BI:G06B<BPM:L1>Pos-Y"],
    ["SR:C07-BI:G02A<BPM:L1>Pos-X", "SR:C07-BI:G02A<BPM:L1>Pos-Y"],
    ["SR:C07-BI:G02A<BPM:L2>Pos-X", "SR:C07-BI:G02A<BPM:L2>Pos-Y"],
    ["SR:C07-BI:G04A<BPM:M1>Pos-X", "SR:C07-BI:G04A<BPM:M1>Pos-Y"],
    ["SR:C07-BI:G04B<BPM:M1>Pos-X", "SR:C07-BI:G04B<BPM:M1>Pos-Y"],
    ["SR:C07-BI:G06B<BPM:H2>Pos-X", "SR:C07-BI:G06B<BPM:H2>Pos-Y"],
    ["SR:C07-BI:G06B<BPM:H1>Pos-X", "SR:C07-BI:G06B<BPM:H1>Pos-Y"],
    ["SR:C08-BI:G02A<BPM:H1>Pos-X", "SR:C08-BI:G02A<BPM:H1>Pos-Y"],
    ["SR:C08-BI:G02A<BPM:H2>Pos-X", "SR:C08-BI:G02A<BPM:H2>Pos-Y"],
    ["SR:C08-BI:G04A<BPM:M1>Pos-X", "SR:C08-BI:G04A<BPM:M1>Pos-Y"],
    ["SR:C08-BI:G04B<BPM:M1>Pos-X", "SR:C08-BI:G04B<BPM:M1>Pos-Y"],
    ["SR:C08-BI:G06B<BPM:L2>Pos-X", "SR:C08-BI:G06B<BPM:L2>Pos-Y"],
    ["SR:C08-BI:G06B<BPM:L1>Pos-X", "SR:C08-BI:G06B<BPM:L1>Pos-Y"],
    ["SR:C09-BI:G02A<BPM:L1>Pos-X", "SR:C09-BI:G02A<BPM:L1>Pos-Y"],
    ["SR:C09-BI:G02A<BPM:L2>Pos-X", "SR:C09-BI:G02A<BPM:L2>Pos-Y"],
    ["SR:C09-BI:G04A<BPM:M1>Pos-X", "SR:C09-BI:G04A<BPM:M1>Pos-Y"],
    ["SR:C09-BI:G04B<BPM:M1>Pos-X", "SR:C09-BI:G04B<BPM:M1>Pos-Y"],
    ["SR:C09-BI:G06B<BPM:H2>Pos-X", "SR:C09-BI:G06B<BPM:H2>Pos-Y"],
    ["SR:C09-BI:G06B<BPM:H1>Pos-X", "SR:C09-BI:G06B<BPM:H1>Pos-Y"],
    ["SR:C10-BI:G02A<BPM:H1>Pos-X", "SR:C10-BI:G02A<BPM:H1>Pos-Y"],
    ["SR:C10-BI:G02A<BPM:H2>Pos-X", "SR:C10-BI:G02A<BPM:H2>Pos-Y"],
    ["SR:C10-BI:G04A<BPM:M1>Pos-X", "SR:C10-BI:G04A<BPM:M1>Pos-Y"],
    ["SR:C10-BI:G04B<BPM:M1>Pos-X", "SR:C10-BI:G04B<BPM:M1>Pos-Y"],
    ["SR:C10-BI:G06B<BPM:L2>Pos-X", "SR:C10-BI:G06B<BPM:L2>Pos-Y"],
    ["SR:C10-BI:G06B<BPM:L1>Pos-X", "SR:C10-BI:G06B<BPM:L1>Pos-Y"],
    ["SR:C11-BI:G02A<BPM:L1>Pos-X", "SR:C11-BI:G02A<BPM:L1>Pos-Y"],
    ["SR:C11-BI:G02A<BPM:L2>Pos-X", "SR:C11-BI:G02A<BPM:L2>Pos-Y"],
    ["SR:C11-BI:G04A<BPM:M1>Pos-X", "SR:C11-BI:G04A<BPM:M1>Pos-Y"],
    ["SR:C11-BI:G04B<BPM:M1>Pos-X", "SR:C11-BI:G04B<BPM:M1>Pos-Y"],
    ["SR:C11-BI:G06B<BPM:H2>Pos-X", "SR:C11-BI:G06B<BPM:H2>Pos-Y"],
    ["SR:C11-BI:G06B<BPM:H1>Pos-X", "SR:C11-BI:G06B<BPM:H1>Pos-Y"],
    ["SR:C12-BI:G02A<BPM:H1>Pos-X", "SR:C12-BI:G02A<BPM:H1>Pos-Y"],
    ["SR:C12-BI:G02A<BPM:H2>Pos-X", "SR:C12-BI:G02A<BPM:H2>Pos-Y"],
    ["SR:C12-BI:G04A<BPM:M1>Pos-X", "SR:C12-BI:G04A<BPM:M1>Pos-Y"],
    ["SR:C12-BI:G04B<BPM:M1>Pos-X", "SR:C12-BI:G04B<BPM:M1>Pos-Y"],
    ["SR:C12-BI:G06B<BPM:L2>Pos-X", "SR:C12-BI:G06B<BPM:L2>Pos-Y"],
    ["SR:C12-BI:G06B<BPM:L1>Pos-X", "SR:C12-BI:G06B<BPM:L1>Pos-Y"],
    ["SR:C13-BI:G02A<BPM:L1>Pos-X", "SR:C13-BI:G02A<BPM:L1>Pos-Y"],
    ["SR:C13-BI:G02A<BPM:L2>Pos-X", "SR:C13-BI:G02A<BPM:L2>Pos-Y"],
    ["SR:C13-BI:G04A<BPM:M1>Pos-X", "SR:C13-BI:G04A<BPM:M1>Pos-Y"],
    ["SR:C13-BI:G04B<BPM:M1>Pos-X", "SR:C13-BI:G04B<BPM:M1>Pos-Y"],
    ["SR:C13-BI:G06B<BPM:H2>Pos-X", "SR:C13-BI:G06B<BPM:H2>Pos-Y"],
    ["SR:C13-BI:G06B<BPM:H1>Pos-X", "SR:C13-BI:G06B<BPM:H1>Pos-Y"],
    ["SR:C14-BI:G02A<BPM:H1>Pos-X", "SR:C14-BI:G02A<BPM:H1>Pos-Y"],
    ["SR:C14-BI:G02A<BPM:H2>Pos-X", "SR:C14-BI:G02A<BPM:H2>Pos-Y"],
    ["SR:C14-BI:G04A<BPM:M1>Pos-X", "SR:C14-BI:G04A<BPM:M1>Pos-Y"],
    ["SR:C14-BI:G04B<BPM:M1>Pos-X", "SR:C14-BI:G04B<BPM:M1>Pos-Y"],
    ["SR:C14-BI:G06B<BPM:L2>Pos-X", "SR:C14-BI:G06B<BPM:L2>Pos-Y"],
    ["SR:C14-BI:G06B<BPM:L1>Pos-X", "SR:C14-BI:G06B<BPM:L1>Pos-Y"],
    ["SR:C15-BI:G02A<BPM:L1>Pos-X", "SR:C15-BI:G02A<BPM:L1>Pos-Y"],
    ["SR:C15-BI:G02A<BPM:L2>Pos-X", "SR:C15-BI:G02A<BPM:L2>Pos-Y"],
    ["SR:C15-BI:G04A<BPM:M1>Pos-X", "SR:C15-BI:G04A<BPM:M1>Pos-Y"],
    ["SR:C15-BI:G04B<BPM:M1>Pos-X", "SR:C15-BI:G04B<BPM:M1>Pos-Y"],
    ["SR:C15-BI:G06B<BPM:H2>Pos-X", "SR:C15-BI:G06B<BPM:H2>Pos-Y"],
    ["SR:C15-BI:G06B<BPM:H1>Pos-X", "SR:C15-BI:G06B<BPM:H1>Pos-Y"],
    ["SR:C16-BI:G02A<BPM:H1>Pos-X", "SR:C16-BI:G02A<BPM:H1>Pos-Y"],
    ["SR:C16-BI:G02A<BPM:H2>Pos-X", "SR:C16-BI:G02A<BPM:H2>Pos-Y"],
    ["SR:C16-BI:G04A<BPM:M1>Pos-X", "SR:C16-BI:G04A<BPM:M1>Pos-Y"],
    ["SR:C16-BI:G04B<BPM:M1>Pos-X", "SR:C16-BI:G04B<BPM:M1>Pos-Y"],
    ["SR:C16-BI:G06B<BPM:L2>Pos-X", "SR:C16-BI:G06B<BPM:L2>Pos-Y"],
    ["SR:C16-BI:G06B<BPM:L1>Pos-X", "SR:C16-BI:G06B<BPM:L1>Pos-Y"],
    ["SR:C17-BI:G02A<BPM:L1>Pos-X", "SR:C17-BI:G02A<BPM:L1>Pos-Y"],
    ["SR:C17-BI:G02A<BPM:L2>Pos-X", "SR:C17-BI:G02A<BPM:L2>Pos-Y"],
    ["SR:C17-BI:G04A<BPM:M1>Pos-X", "SR:C17-BI:G04A<BPM:M1>Pos-Y"],
    ["SR:C17-BI:G04B<BPM:M1>Pos-X", "SR:C17-BI:G04B<BPM:M1>Pos-Y"],
    ["SR:C17-BI:G06B<BPM:H2>Pos-X", "SR:C17-BI:G06B<BPM:H2>Pos-Y"],
    ["SR:C17-BI:G06B<BPM:H1>Pos-X", "SR:C17-BI:G06B<BPM:H1>Pos-Y"],
    ["SR:C18-BI:G02A<BPM:H1>Pos-X", "SR:C18-BI:G02A<BPM:H1>Pos-Y"],
    ["SR:C18-BI:G02A<BPM:H2>Pos-X", "SR:C18-BI:G02A<BPM:H2>Pos-Y"],
    ["SR:C18-BI:G04A<BPM:M1>Pos-X", "SR:C18-BI:G04A<BPM:M1>Pos-Y"],
    ["SR:C18-BI:G04B<BPM:M1>Pos-X", "SR:C18-BI:G04B<BPM:M1>Pos-Y"],
    ["SR:C18-BI:G06B<BPM:L2>Pos-X", "SR:C18-BI:G06B<BPM:L2>Pos-Y"],
    ["SR:C18-BI:G06B<BPM:L1>Pos-X", "SR:C18-BI:G06B<BPM:L1>Pos-Y"],
    ["SR:C19-BI:G02A<BPM:L1>Pos-X", "SR:C19-BI:G02A<BPM:L1>Pos-Y"],
    ["SR:C19-BI:G02A<BPM:L2>Pos-X", "SR:C19-BI:G02A<BPM:L2>Pos-Y"],
    ["SR:C19-BI:G04A<BPM:M1>Pos-X", "SR:C19-BI:G04A<BPM:M1>Pos-Y"],
    ["SR:C19-BI:G04B<BPM:M1>Pos-X", "SR:C19-BI:G04B<BPM:M1>Pos-Y"],
    ["SR:C19-BI:G06B<BPM:H2>Pos-X", "SR:C19-BI:G06B<BPM:H2>Pos-Y"],
    ["SR:C19-BI:G06B<BPM:H1>Pos-X", "SR:C19-BI:G06B<BPM:H1>Pos-Y"],
    ["SR:C20-BI:G02A<BPM:H1>Pos-X", "SR:C20-BI:G02A<BPM:H1>Pos-Y"],
    ["SR:C20-BI:G02A<BPM:H2>Pos-X", "SR:C20-BI:G02A<BPM:H2>Pos-Y"],
    ["SR:C20-BI:G04A<BPM:M1>Pos-X", "SR:C20-BI:G04A<BPM:M1>Pos-Y"],
    ["SR:C20-BI:G04B<BPM:M1>Pos-X", "SR:C20-BI:G04B<BPM:M1>Pos-Y"],
    ["SR:C20-BI:G06B<BPM:L2>Pos-X", "SR:C20-BI:G06B<BPM:L2>Pos-Y"],
    ["SR:C20-BI:G06B<BPM:L1>Pos-X", "SR:C20-BI:G06B<BPM:L1>Pos-Y"],
    ["SR:C21-BI:G02A<BPM:L1>Pos-X", "SR:C21-BI:G02A<BPM:L1>Pos-Y"],
    ["SR:C21-BI:G02A<BPM:L2>Pos-X", "SR:C21-BI:G02A<BPM:L2>Pos-Y"],
    ["SR:C21-BI:G04A<BPM:M1>Pos-X", "SR:C21-BI:G04A<BPM:M1>Pos-Y"],
    ["SR:C21-BI:G04B<BPM:M1>Pos-X", "SR:C21-BI:G04B<BPM:M1>Pos-Y"],
    ["SR:C21-BI:G06B<BPM:H2>Pos-X", "SR:C21-BI:G06B<BPM:H2>Pos-Y"],
    ["SR:C21-BI:G06B<BPM:H1>Pos-X", "SR:C21-BI:G06B<BPM:H1>Pos-Y"],
    ["SR:C22-BI:G02A<BPM:H1>Pos-X", "SR:C22-BI:G02A<BPM:H1>Pos-Y"],
    ["SR:C22-BI:G02A<BPM:H2>Pos-X", "SR:C22-BI:G02A<BPM:H2>Pos-Y"],
    ["SR:C22-BI:G04A<BPM:M1>Pos-X", "SR:C22-BI:G04A<BPM:M1>Pos-Y"],
    ["SR:C22-BI:G04B<BPM:M1>Pos-X", "SR:C22-BI:G04B<BPM:M1>Pos-Y"],
    ["SR:C22-BI:G06B<BPM:L2>Pos-X", "SR:C22-BI:G06B<BPM:L2>Pos-Y"],
    ["SR:C22-BI:G06B<BPM:L1>Pos-X", "SR:C22-BI:G06B<BPM:L1>Pos-Y"],
    ["SR:C23-BI:G02A<BPM:L1>Pos-X", "SR:C23-BI:G02A<BPM:L1>Pos-Y"],
    ["SR:C23-BI:G02A<BPM:L2>Pos-X", "SR:C23-BI:G02A<BPM:L2>Pos-Y"],
    ["SR:C23-BI:G04A<BPM:M1>Pos-X", "SR:C23-BI:G04A<BPM:M1>Pos-Y"],
    ["SR:C23-BI:G04B<BPM:M1>Pos-X", "SR:C23-BI:G04B<BPM:M1>Pos-Y"],
    ["SR:C23-BI:G06B<BPM:H2>Pos-X", "SR:C23-BI:G06B<BPM:H2>Pos-Y"],
    ["SR:C23-BI:G06B<BPM:H1>Pos-X", "SR:C23-BI:G06B<BPM:H1>Pos-Y"],
    ["SR:C24-BI:G02A<BPM:H1>Pos-X", "SR:C24-BI:G02A<BPM:H1>Pos-Y"],
    ["SR:C24-BI:G02A<BPM:H2>Pos-X", "SR:C24-BI:G02A<BPM:H2>Pos-Y"],
    ["SR:C24-BI:G04A<BPM:M1>Pos-X", "SR:C24-BI:G04A<BPM:M1>Pos-Y"],
    ["SR:C24-BI:G04B<BPM:M1>Pos-X", "SR:C24-BI:G04B<BPM:M1>Pos-Y"],
    ["SR:C24-BI:G06B<BPM:L2>Pos-X", "SR:C24-BI:G06B<BPM:L2>Pos-Y"],
    ["SR:C24-BI:G06B<BPM:L1>Pos-X", "SR:C24-BI:G06B<BPM:L1>Pos-Y"],
    ["SR:C25-BI:G02A<BPM:L1>Pos-X", "SR:C25-BI:G02A<BPM:L1>Pos-Y"],
    ["SR:C25-BI:G02A<BPM:L2>Pos-X", "SR:C25-BI:G02A<BPM:L2>Pos-Y"],
    ["SR:C25-BI:G04A<BPM:M1>Pos-X", "SR:C25-BI:G04A<BPM:M1>Pos-Y"],
    ["SR:C25-BI:G04B<BPM:M1>Pos-X", "SR:C25-BI:G04B<BPM:M1>Pos-Y"],
    ["SR:C25-BI:G06B<BPM:H2>Pos-X", "SR:C25-BI:G06B<BPM:H2>Pos-Y"],
    ["SR:C25-BI:G06B<BPM:H1>Pos-X", "SR:C25-BI:G06B<BPM:H1>Pos-Y"],
    ["SR:C26-BI:G02A<BPM:H1>Pos-X", "SR:C26-BI:G02A<BPM:H1>Pos-Y"],
    ["SR:C26-BI:G02A<BPM:H2>Pos-X", "SR:C26-BI:G02A<BPM:H2>Pos-Y"],
    ["SR:C26-BI:G04A<BPM:M1>Pos-X", "SR:C26-BI:G04A<BPM:M1>Pos-Y"],
    ["SR:C26-BI:G04B<BPM:M1>Pos-X", "SR:C26-BI:G04B<BPM:M1>Pos-Y"],
    ["SR:C26-BI:G06B<BPM:L2>Pos-X", "SR:C26-BI:G06B<BPM:L2>Pos-Y"],
    ["SR:C26-BI:G06B<BPM:L1>Pos-X", "SR:C26-BI:G06B<BPM:L1>Pos-Y"],
    ["SR:C27-BI:G02A<BPM:L1>Pos-X", "SR:C27-BI:G02A<BPM:L1>Pos-Y"],
    ["SR:C27-BI:G02A<BPM:L2>Pos-X", "SR:C27-BI:G02A<BPM:L2>Pos-Y"],
    ["SR:C27-BI:G04A<BPM:M1>Pos-X", "SR:C27-BI:G04A<BPM:M1>Pos-Y"],
    ["SR:C27-BI:G04B<BPM:M1>Pos-X", "SR:C27-BI:G04B<BPM:M1>Pos-Y"],
    ["SR:C27-BI:G06B<BPM:H2>Pos-X", "SR:C27-BI:G06B<BPM:H2>Pos-Y"],
    ["SR:C27-BI:G06B<BPM:H1>Pos-X", "SR:C27-BI:G06B<BPM:H1>Pos-Y"],
    ["SR:C28-BI:G02A<BPM:H1>Pos-X", "SR:C28-BI:G02A<BPM:H1>Pos-Y"],
    ["SR:C28-BI:G02A<BPM:H2>Pos-X", "SR:C28-BI:G02A<BPM:H2>Pos-Y"],
    ["SR:C28-BI:G04A<BPM:M1>Pos-X", "SR:C28-BI:G04A<BPM:M1>Pos-Y"],
    ["SR:C28-BI:G04B<BPM:M1>Pos-X", "SR:C28-BI:G04B<BPM:M1>Pos-Y"],
    ["SR:C28-BI:G06B<BPM:L2>Pos-X", "SR:C28-BI:G06B<BPM:L2>Pos-Y"],
    ["SR:C28-BI:G06B<BPM:L1>Pos-X", "SR:C28-BI:G06B<BPM:L1>Pos-Y"],
    ["SR:C29-BI:G02A<BPM:L1>Pos-X", "SR:C29-BI:G02A<BPM:L1>Pos-Y"],
    ["SR:C29-BI:G02A<BPM:L2>Pos-X", "SR:C29-BI:G02A<BPM:L2>Pos-Y"],
    ["SR:C29-BI:G04A<BPM:M1>Pos-X", "SR:C29-BI:G04A<BPM:M1>Pos-Y"],
    ["SR:C29-BI:G04B<BPM:M1>Pos-X", "SR:C29-BI:G04B<BPM:M1>Pos-Y"],
    ["SR:C29-BI:G06B<BPM:H2>Pos-X", "SR:C29-BI:G06B<BPM:H2>Pos-Y"],
    ["SR:C29-BI:G06B<BPM:H1>Pos-X", "SR:C29-BI:G06B<BPM:H1>Pos-Y"]
    ]
trim = [
    ["SR:C30-MG:G01A<HCM:H2>Fld-SP","SR:C30-MG:G01A<VCM:H2>Fld-SP","FH2G1C30A","FTRIM", 0.044],
    ["SR:C30-MG:G02A<HCM:H>Fld-SP","SR:C30-MG:G02A<VCM:H>Fld-SP","SQHG2C30A","SQ_TRIM", 0.2],
    ["SR:C30-MG:G02A<HCM:H2>Fld-SP","SR:C30-MG:G02A<VCM:H2>Fld-SP","CH2G2C30A","TRIMD", 0.3],
    ["SR:C30-MG:G04A<HCM:M1>Fld-SP","SR:C30-MG:G04A<VCM:M1>Fld-SP","CM1G4C30A","TRIMD", 0.2],
    ["SR:C30-MG:G04A<HCM:M1>Fld-SP","SR:C30-MG:G04A<VCM:M1>Fld-SP","FM1G4C30A","FTRIM", 0.044],
    ["SR:C30-MG:G04B<HCM:M1>Fld-SP","SR:C30-MG:G04B<VCM:M1>Fld-SP","CM1G4C30B","TRIMD", 0.3],
    ["SR:C30-MG:G06B<HCM:L2>Fld-SP","SR:C30-MG:G06B<VCM:L2>Fld-SP","CL2G6C30B","TRIMD", 0.2],
    ["SR:C30-MG:G06B<HCM:L1>Fld-SP","SR:C30-MG:G06B<VCM:L1>Fld-SP","CL1G6C30B","TRIMD", 0.2],
    ["SR:C01-MG:G01A<HCM:L1>Fld-SP","SR:C01-MG:G01A<VCM:L1>Fld-SP","FL1G1C01A","FTRIM", 0.044],
    ["SR:C01-MG:G01A<HCM:L2>Fld-SP","SR:C01-MG:G01A<VCM:L2>Fld-SP","FL2G1C01A","FTRIM", 0.044],
    ["SR:C01-MG:G02A<HCM:L1>Fld-SP","SR:C01-MG:G02A<VCM:L1>Fld-SP","CL1G2C01A","TRIMD", 0.2],
    ["SR:C01-MG:G02A<HCM:L2>Fld-SP","SR:C01-MG:G02A<VCM:L2>Fld-SP","CL2G2C01A","TRIMD", 0.2],
    ["SR:C01-MG:G04A<HCM:M>Fld-SP","SR:C01-MG:G04A<VCM:M>Fld-SP","SQMG4C01A","SQ_TRIM", 0.2],
    ["SR:C01-MG:G04A<HCM:M1>Fld-SP","SR:C01-MG:G04A<VCM:M1>Fld-SP","FM1G4C01A","FTRIM", 0.044],
    ["SR:C01-MG:G04B<HCM:M1>Fld-SP","SR:C01-MG:G04B<VCM:M1>Fld-SP","CM1G4C01B","TRIMD", 0.3],
    ["SR:C01-MG:G06B<HCM:H2>Fld-SP","SR:C01-MG:G06B<VCM:H2>Fld-SP","CH2G6C01B","TRIMD", 0.3],
    ["SR:C01-MG:G06B<HCM:H1>Fld-SP","SR:C01-MG:G06B<VCM:H1>Fld-SP","CH1G6C01B","TRIMD", 0.2],
    ["SR:C02-MG:G01A<HCM:H1>Fld-SP","SR:C02-MG:G01A<VCM:H1>Fld-SP","FH1G1C02A","FTRIM", 0.044],
    ["SR:C02-MG:G01A<HCM:H2>Fld-SP","SR:C02-MG:G01A<VCM:H2>Fld-SP","FH2G1C02A","FTRIM", 0.044],
    ["SR:C02-MG:G02A<HCM:H>Fld-SP","SR:C02-MG:G02A<VCM:H>Fld-SP","SQHG2C02A","SQ_TRIM", 0.2],
    ["SR:C02-MG:G02A<HCM:H2>Fld-SP","SR:C02-MG:G02A<VCM:H2>Fld-SP","CH2G2C02A","TRIMD", 0.3],
    ["SR:C02-MG:G04A<HCM:M1>Fld-SP","SR:C02-MG:G04A<VCM:M1>Fld-SP","CM1G4C02A","TRIMD", 0.2],
    ["SR:C02-MG:G04A<HCM:M1>Fld-SP","SR:C02-MG:G04A<VCM:M1>Fld-SP","FM1G4C02A","FTRIM", 0.044],
    ["SR:C02-MG:G04B<HCM:M1>Fld-SP","SR:C02-MG:G04B<VCM:M1>Fld-SP","CM1G4C02B","TRIMD", 0.3],
    ["SR:C02-MG:G06B<HCM:L2>Fld-SP","SR:C02-MG:G06B<VCM:L2>Fld-SP","CL2G6C02B","TRIMD", 0.2],
    ["SR:C02-MG:G06B<HCM:L1>Fld-SP","SR:C02-MG:G06B<VCM:L1>Fld-SP","CL1G6C02B","TRIMD", 0.2],
    ["SR:C03-MG:G01A<HCM:L1>Fld-SP","SR:C03-MG:G01A<VCM:L1>Fld-SP","FL1G1C03A","FTRIM", 0.044],
    ["SR:C03-MG:G01A<HCM:L2>Fld-SP","SR:C03-MG:G01A<VCM:L2>Fld-SP","FL2G1C03A","FTRIM", 0.044],
    ["SR:C03-MG:G02A<HCM:L1>Fld-SP","SR:C03-MG:G02A<VCM:L1>Fld-SP","CL1G2C03A","TRIMD", 0.2],
    ["SR:C03-MG:G02A<HCM:L2>Fld-SP","SR:C03-MG:G02A<VCM:L2>Fld-SP","CL2G2C03A","TRIMD", 0.2],
    ["SR:C03-MG:G04A<HCM:M>Fld-SP","SR:C03-MG:G04A<VCM:M>Fld-SP","SQMG4C03A","SQ_TRIM", 0.2],
    ["SR:C03-MG:G04A<HCM:M1>Fld-SP","SR:C03-MG:G04A<VCM:M1>Fld-SP","FM1G4C03A","FTRIM", 0.044],
    ["SR:C03-MG:G04B<HCM:M1>Fld-SP","SR:C03-MG:G04B<VCM:M1>Fld-SP","CM1G4C03B","TRIMD", 0.3],
    ["SR:C03-MG:G06B<HCM:H2>Fld-SP","SR:C03-MG:G06B<VCM:H2>Fld-SP","CH2G6C03B","TRIMD", 0.3],
    ["SR:C03-MG:G06B<HCM:H1>Fld-SP","SR:C03-MG:G06B<VCM:H1>Fld-SP","CH1G6C03B","TRIMD", 0.2],
    ["SR:C04-MG:G01A<HCM:H1>Fld-SP","SR:C04-MG:G01A<VCM:H1>Fld-SP","FH1G1C04A","FTRIM", 0.044],
    ["SR:C04-MG:G01A<HCM:H2>Fld-SP","SR:C04-MG:G01A<VCM:H2>Fld-SP","FH2G1C04A","FTRIM", 0.044],
    ["SR:C04-MG:G02A<HCM:H>Fld-SP","SR:C04-MG:G02A<VCM:H>Fld-SP","SQHG2C04A","SQ_TRIM", 0.2],
    ["SR:C04-MG:G02A<HCM:H2>Fld-SP","SR:C04-MG:G02A<VCM:H2>Fld-SP","CH2G2C04A","TRIMD", 0.3],
    ["SR:C04-MG:G04A<HCM:M1>Fld-SP","SR:C04-MG:G04A<VCM:M1>Fld-SP","CM1G4C04A","TRIMD", 0.2],
    ["SR:C04-MG:G04A<HCM:M1>Fld-SP","SR:C04-MG:G04A<VCM:M1>Fld-SP","FM1G4C04A","FTRIM", 0.044],
    ["SR:C04-MG:G04B<HCM:M1>Fld-SP","SR:C04-MG:G04B<VCM:M1>Fld-SP","CM1G4C04B","TRIMD", 0.3],
    ["SR:C04-MG:G06B<HCM:L2>Fld-SP","SR:C04-MG:G06B<VCM:L2>Fld-SP","CL2G6C04B","TRIMD", 0.2],
    ["SR:C04-MG:G06B<HCM:L1>Fld-SP","SR:C04-MG:G06B<VCM:L1>Fld-SP","CL1G6C04B","TRIMD", 0.2],
    ["SR:C05-MG:G01A<HCM:L1>Fld-SP","SR:C05-MG:G01A<VCM:L1>Fld-SP","FL1G1C05A","FTRIM", 0.044],
    ["SR:C05-MG:G01A<HCM:L2>Fld-SP","SR:C05-MG:G01A<VCM:L2>Fld-SP","FL2G1C05A","FTRIM", 0.044],
    ["SR:C05-MG:G02A<HCM:L1>Fld-SP","SR:C05-MG:G02A<VCM:L1>Fld-SP","CL1G2C05A","TRIMD", 0.2],
    ["SR:C05-MG:G02A<HCM:L2>Fld-SP","SR:C05-MG:G02A<VCM:L2>Fld-SP","CL2G2C05A","TRIMD", 0.2],
    ["SR:C05-MG:G04A<HCM:M>Fld-SP","SR:C05-MG:G04A<VCM:M>Fld-SP","SQMG4C05A","SQ_TRIM", 0.2],
    ["SR:C05-MG:G04A<HCM:M1>Fld-SP","SR:C05-MG:G04A<VCM:M1>Fld-SP","FM1G4C05A","FTRIM", 0.044],
    ["SR:C05-MG:G04B<HCM:M1>Fld-SP","SR:C05-MG:G04B<VCM:M1>Fld-SP","CM1G4C05B","TRIMD", 0.3],
    ["SR:C05-MG:G06B<HCM:H2>Fld-SP","SR:C05-MG:G06B<VCM:H2>Fld-SP","CH2G6C05B","TRIMD", 0.3],
    ["SR:C05-MG:G06B<HCM:H1>Fld-SP","SR:C05-MG:G06B<VCM:H1>Fld-SP","CH1G6C05B","TRIMD", 0.2],
    ["SR:C06-MG:G01A<HCM:H1>Fld-SP","SR:C06-MG:G01A<VCM:H1>Fld-SP","FH1G1C06A","FTRIM", 0.044],
    ["SR:C06-MG:G01A<HCM:H2>Fld-SP","SR:C06-MG:G01A<VCM:H2>Fld-SP","FH2G1C06A","FTRIM", 0.044],
    ["SR:C06-MG:G02A<HCM:H>Fld-SP","SR:C06-MG:G02A<VCM:H>Fld-SP","SQHG2C06A","SQ_TRIM", 0.2],
    ["SR:C06-MG:G02A<HCM:H2>Fld-SP","SR:C06-MG:G02A<VCM:H2>Fld-SP","CH2G2C06A","TRIMD", 0.3],
    ["SR:C06-MG:G04A<HCM:M1>Fld-SP","SR:C06-MG:G04A<VCM:M1>Fld-SP","CM1G4C06A","TRIMD", 0.2],
    ["SR:C06-MG:G04A<HCM:M1>Fld-SP","SR:C06-MG:G04A<VCM:M1>Fld-SP","FM1G4C06A","FTRIM", 0.044],
    ["SR:C06-MG:G04B<HCM:M1>Fld-SP","SR:C06-MG:G04B<VCM:M1>Fld-SP","CM1G4C06B","TRIMD", 0.3],
    ["SR:C06-MG:G06B<HCM:L2>Fld-SP","SR:C06-MG:G06B<VCM:L2>Fld-SP","CL2G6C06B","TRIMD", 0.2],
    ["SR:C06-MG:G06B<HCM:L1>Fld-SP","SR:C06-MG:G06B<VCM:L1>Fld-SP","CL1G6C06B","TRIMD", 0.2],
    ["SR:C07-MG:G01A<HCM:L1>Fld-SP","SR:C07-MG:G01A<VCM:L1>Fld-SP","FL1G1C07A","FTRIM", 0.044],
    ["SR:C07-MG:G01A<HCM:L2>Fld-SP","SR:C07-MG:G01A<VCM:L2>Fld-SP","FL2G1C07A","FTRIM", 0.044],
    ["SR:C07-MG:G02A<HCM:L1>Fld-SP","SR:C07-MG:G02A<VCM:L1>Fld-SP","CL1G2C07A","TRIMD", 0.2],
    ["SR:C07-MG:G02A<HCM:L2>Fld-SP","SR:C07-MG:G02A<VCM:L2>Fld-SP","CL2G2C07A","TRIMD", 0.2],
    ["SR:C07-MG:G04A<HCM:M>Fld-SP","SR:C07-MG:G04A<VCM:M>Fld-SP","SQMG4C07A","SQ_TRIM", 0.2],
    ["SR:C07-MG:G04A<HCM:M1>Fld-SP","SR:C07-MG:G04A<VCM:M1>Fld-SP","FM1G4C07A","FTRIM", 0.044],
    ["SR:C07-MG:G04B<HCM:M1>Fld-SP","SR:C07-MG:G04B<VCM:M1>Fld-SP","CM1G4C07B","TRIMD", 0.3],
    ["SR:C07-MG:G06B<HCM:H2>Fld-SP","SR:C07-MG:G06B<VCM:H2>Fld-SP","CH2G6C07B","TRIMD", 0.3],
    ["SR:C07-MG:G06B<HCM:H1>Fld-SP","SR:C07-MG:G06B<VCM:H1>Fld-SP","CH1G6C07B","TRIMD", 0.2],
    ["SR:C08-MG:G01A<HCM:H1>Fld-SP","SR:C08-MG:G01A<VCM:H1>Fld-SP","FH1G1C08A","FTRIM", 0.044],
    ["SR:C08-MG:G01A<HCM:H2>Fld-SP","SR:C08-MG:G01A<VCM:H2>Fld-SP","FH2G1C08A","FTRIM", 0.044],
    ["SR:C08-MG:G02A<HCM:H>Fld-SP","SR:C08-MG:G02A<VCM:H>Fld-SP","SQHG2C08A","SQ_TRIM", 0.2],
    ["SR:C08-MG:G02A<HCM:H2>Fld-SP","SR:C08-MG:G02A<VCM:H2>Fld-SP","CH2G2C08A","TRIMD", 0.3],
    ["SR:C08-MG:G04A<HCM:M1>Fld-SP","SR:C08-MG:G04A<VCM:M1>Fld-SP","CM1G4C08A","TRIMD", 0.2],
    ["SR:C08-MG:G04A<HCM:M1>Fld-SP","SR:C08-MG:G04A<VCM:M1>Fld-SP","FM1G4C08A","FTRIM", 0.044],
    ["SR:C08-MG:G04B<HCM:M1>Fld-SP","SR:C08-MG:G04B<VCM:M1>Fld-SP","CM1G4C08B","TRIMD", 0.3],
    ["SR:C08-MG:G06B<HCM:L2>Fld-SP","SR:C08-MG:G06B<VCM:L2>Fld-SP","CL2G6C08B","TRIMD", 0.2],
    ["SR:C08-MG:G06B<HCM:L1>Fld-SP","SR:C08-MG:G06B<VCM:L1>Fld-SP","CL1G6C08B","TRIMD", 0.2],
    ["SR:C09-MG:G01A<HCM:L1>Fld-SP","SR:C09-MG:G01A<VCM:L1>Fld-SP","FL1G1C09A","FTRIM", 0.044],
    ["SR:C09-MG:G01A<HCM:L2>Fld-SP","SR:C09-MG:G01A<VCM:L2>Fld-SP","FL2G1C09A","FTRIM", 0.044],
    ["SR:C09-MG:G02A<HCM:L1>Fld-SP","SR:C09-MG:G02A<VCM:L1>Fld-SP","CL1G2C09A","TRIMD", 0.2],
    ["SR:C09-MG:G02A<HCM:L2>Fld-SP","SR:C09-MG:G02A<VCM:L2>Fld-SP","CL2G2C09A","TRIMD", 0.2],
    ["SR:C09-MG:G04A<HCM:M>Fld-SP","SR:C09-MG:G04A<VCM:M>Fld-SP","SQMG4C09A","SQ_TRIM", 0.2],
    ["SR:C09-MG:G04A<HCM:M1>Fld-SP","SR:C09-MG:G04A<VCM:M1>Fld-SP","FM1G4C09A","FTRIM", 0.044],
    ["SR:C09-MG:G04B<HCM:M1>Fld-SP","SR:C09-MG:G04B<VCM:M1>Fld-SP","CM1G4C09B","TRIMD", 0.3],
    ["SR:C09-MG:G06B<HCM:H2>Fld-SP","SR:C09-MG:G06B<VCM:H2>Fld-SP","CH2G6C09B","TRIMD", 0.3],
    ["SR:C09-MG:G06B<HCM:H1>Fld-SP","SR:C09-MG:G06B<VCM:H1>Fld-SP","CH1G6C09B","TRIMD", 0.2],
    ["SR:C10-MG:G01A<HCM:H1>Fld-SP","SR:C10-MG:G01A<VCM:H1>Fld-SP","FH1G1C10A","FTRIM", 0.044],
    ["SR:C10-MG:G01A<HCM:H2>Fld-SP","SR:C10-MG:G01A<VCM:H2>Fld-SP","FH2G1C10A","FTRIM", 0.044],
    ["SR:C10-MG:G02A<HCM:H>Fld-SP","SR:C10-MG:G02A<VCM:H>Fld-SP","SQHG2C10A","SQ_TRIM", 0.2],
    ["SR:C10-MG:G02A<HCM:H2>Fld-SP","SR:C10-MG:G02A<VCM:H2>Fld-SP","CH2G2C10A","TRIMD", 0.3],
    ["SR:C10-MG:G04A<HCM:M1>Fld-SP","SR:C10-MG:G04A<VCM:M1>Fld-SP","CM1G4C10A","TRIMD", 0.2],
    ["SR:C10-MG:G04A<HCM:M1>Fld-SP","SR:C10-MG:G04A<VCM:M1>Fld-SP","FM1G4C10A","FTRIM", 0.044],
    ["SR:C10-MG:G04B<HCM:M1>Fld-SP","SR:C10-MG:G04B<VCM:M1>Fld-SP","CM1G4C10B","TRIMD", 0.3],
    ["SR:C10-MG:G06B<HCM:L2>Fld-SP","SR:C10-MG:G06B<VCM:L2>Fld-SP","CL2G6C10B","TRIMD", 0.2],
    ["SR:C10-MG:G06B<HCM:L1>Fld-SP","SR:C10-MG:G06B<VCM:L1>Fld-SP","CL1G6C10B","TRIMD", 0.2],
    ["SR:C11-MG:G01A<HCM:L1>Fld-SP","SR:C11-MG:G01A<VCM:L1>Fld-SP","FL1G1C11A","FTRIM", 0.044],
    ["SR:C11-MG:G01A<HCM:L2>Fld-SP","SR:C11-MG:G01A<VCM:L2>Fld-SP","FL2G1C11A","FTRIM", 0.044],
    ["SR:C11-MG:G02A<HCM:L1>Fld-SP","SR:C11-MG:G02A<VCM:L1>Fld-SP","CL1G2C11A","TRIMD", 0.2],
    ["SR:C11-MG:G02A<HCM:L2>Fld-SP","SR:C11-MG:G02A<VCM:L2>Fld-SP","CL2G2C11A","TRIMD", 0.2],
    ["SR:C11-MG:G04A<HCM:M>Fld-SP","SR:C11-MG:G04A<VCM:M>Fld-SP","SQMG4C11A","SQ_TRIM", 0.2],
    ["SR:C11-MG:G04A<HCM:M1>Fld-SP","SR:C11-MG:G04A<VCM:M1>Fld-SP","FM1G4C11A","FTRIM", 0.044],
    ["SR:C11-MG:G04B<HCM:M1>Fld-SP","SR:C11-MG:G04B<VCM:M1>Fld-SP","CM1G4C11B","TRIMD", 0.3],
    ["SR:C11-MG:G06B<HCM:H2>Fld-SP","SR:C11-MG:G06B<VCM:H2>Fld-SP","CH2G6C11B","TRIMD", 0.3],
    ["SR:C11-MG:G06B<HCM:H1>Fld-SP","SR:C11-MG:G06B<VCM:H1>Fld-SP","CH1G6C11B","TRIMD", 0.2],
    ["SR:C12-MG:G01A<HCM:H1>Fld-SP","SR:C12-MG:G01A<VCM:H1>Fld-SP","FH1G1C12A","FTRIM", 0.044],
    ["SR:C12-MG:G01A<HCM:H2>Fld-SP","SR:C12-MG:G01A<VCM:H2>Fld-SP","FH2G1C12A","FTRIM", 0.044],
    ["SR:C12-MG:G02A<HCM:H>Fld-SP","SR:C12-MG:G02A<VCM:H>Fld-SP","SQHG2C12A","SQ_TRIM", 0.2],
    ["SR:C12-MG:G02A<HCM:H2>Fld-SP","SR:C12-MG:G02A<VCM:H2>Fld-SP","CH2G2C12A","TRIMD", 0.3],
    ["SR:C12-MG:G04A<HCM:M1>Fld-SP","SR:C12-MG:G04A<VCM:M1>Fld-SP","CM1G4C12A","TRIMD", 0.2],
    ["SR:C12-MG:G04A<HCM:M1>Fld-SP","SR:C12-MG:G04A<VCM:M1>Fld-SP","FM1G4C12A","FTRIM", 0.044],
    ["SR:C12-MG:G04B<HCM:M1>Fld-SP","SR:C12-MG:G04B<VCM:M1>Fld-SP","CM1G4C12B","TRIMD", 0.3],
    ["SR:C12-MG:G06B<HCM:L2>Fld-SP","SR:C12-MG:G06B<VCM:L2>Fld-SP","CL2G6C12B","TRIMD", 0.2],
    ["SR:C12-MG:G06B<HCM:L1>Fld-SP","SR:C12-MG:G06B<VCM:L1>Fld-SP","CL1G6C12B","TRIMD", 0.2],
    ["SR:C13-MG:G01A<HCM:L1>Fld-SP","SR:C13-MG:G01A<VCM:L1>Fld-SP","FL1G1C13A","FTRIM", 0.044],
    ["SR:C13-MG:G01A<HCM:L2>Fld-SP","SR:C13-MG:G01A<VCM:L2>Fld-SP","FL2G1C13A","FTRIM", 0.044],
    ["SR:C13-MG:G02A<HCM:L1>Fld-SP","SR:C13-MG:G02A<VCM:L1>Fld-SP","CL1G2C13A","TRIMD", 0.2],
    ["SR:C13-MG:G02A<HCM:L2>Fld-SP","SR:C13-MG:G02A<VCM:L2>Fld-SP","CL2G2C13A","TRIMD", 0.2],
    ["SR:C13-MG:G04A<HCM:M>Fld-SP","SR:C13-MG:G04A<VCM:M>Fld-SP","SQMG4C13A","SQ_TRIM", 0.2],
    ["SR:C13-MG:G04A<HCM:M1>Fld-SP","SR:C13-MG:G04A<VCM:M1>Fld-SP","FM1G4C13A","FTRIM", 0.044],
    ["SR:C13-MG:G04B<HCM:M1>Fld-SP","SR:C13-MG:G04B<VCM:M1>Fld-SP","CM1G4C13B","TRIMD", 0.3],
    ["SR:C13-MG:G06B<HCM:H2>Fld-SP","SR:C13-MG:G06B<VCM:H2>Fld-SP","CH2G6C13B","TRIMD", 0.3],
    ["SR:C13-MG:G06B<HCM:H1>Fld-SP","SR:C13-MG:G06B<VCM:H1>Fld-SP","CH1G6C13B","TRIMD", 0.2],
    ["SR:C14-MG:G01A<HCM:H1>Fld-SP","SR:C14-MG:G01A<VCM:H1>Fld-SP","FH1G1C14A","FTRIM", 0.044],
    ["SR:C14-MG:G01A<HCM:H2>Fld-SP","SR:C14-MG:G01A<VCM:H2>Fld-SP","FH2G1C14A","FTRIM", 0.044],
    ["SR:C14-MG:G02A<HCM:H>Fld-SP","SR:C14-MG:G02A<VCM:H>Fld-SP","SQHG2C14A","SQ_TRIM", 0.2],
    ["SR:C14-MG:G02A<HCM:H2>Fld-SP","SR:C14-MG:G02A<VCM:H2>Fld-SP","CH2G2C14A","TRIMD", 0.3],
    ["SR:C14-MG:G04A<HCM:M1>Fld-SP","SR:C14-MG:G04A<VCM:M1>Fld-SP","CM1G4C14A","TRIMD", 0.2],
    ["SR:C14-MG:G04A<HCM:M1>Fld-SP","SR:C14-MG:G04A<VCM:M1>Fld-SP","FM1G4C14A","FTRIM", 0.044],
    ["SR:C14-MG:G04B<HCM:M1>Fld-SP","SR:C14-MG:G04B<VCM:M1>Fld-SP","CM1G4C14B","TRIMD", 0.3],
    ["SR:C14-MG:G06B<HCM:L2>Fld-SP","SR:C14-MG:G06B<VCM:L2>Fld-SP","CL2G6C14B","TRIMD", 0.2],
    ["SR:C14-MG:G06B<HCM:L1>Fld-SP","SR:C14-MG:G06B<VCM:L1>Fld-SP","CL1G6C14B","TRIMD", 0.2],
    ["SR:C15-MG:G01A<HCM:L1>Fld-SP","SR:C15-MG:G01A<VCM:L1>Fld-SP","FL1G1C15A","FTRIM", 0.044],
    ["SR:C15-MG:G01A<HCM:L2>Fld-SP","SR:C15-MG:G01A<VCM:L2>Fld-SP","FL2G1C15A","FTRIM", 0.044],
    ["SR:C15-MG:G02A<HCM:L1>Fld-SP","SR:C15-MG:G02A<VCM:L1>Fld-SP","CL1G2C15A","TRIMD", 0.2],
    ["SR:C15-MG:G02A<HCM:L2>Fld-SP","SR:C15-MG:G02A<VCM:L2>Fld-SP","CL2G2C15A","TRIMD", 0.2],
    ["SR:C15-MG:G04A<HCM:M>Fld-SP","SR:C15-MG:G04A<VCM:M>Fld-SP","SQMG4C15A","SQ_TRIM", 0.2],
    ["SR:C15-MG:G04A<HCM:M1>Fld-SP","SR:C15-MG:G04A<VCM:M1>Fld-SP","FM1G4C15A","FTRIM", 0.044],
    ["SR:C15-MG:G04B<HCM:M1>Fld-SP","SR:C15-MG:G04B<VCM:M1>Fld-SP","CM1G4C15B","TRIMD", 0.3],
    ["SR:C15-MG:G06B<HCM:H2>Fld-SP","SR:C15-MG:G06B<VCM:H2>Fld-SP","CH2G6C15B","TRIMD", 0.3],
    ["SR:C15-MG:G06B<HCM:H1>Fld-SP","SR:C15-MG:G06B<VCM:H1>Fld-SP","CH1G6C15B","TRIMD", 0.2],
    ["SR:C16-MG:G01A<HCM:H1>Fld-SP","SR:C16-MG:G01A<VCM:H1>Fld-SP","FH1G1C16A","FTRIM", 0.044],
    ["SR:C16-MG:G01A<HCM:H2>Fld-SP","SR:C16-MG:G01A<VCM:H2>Fld-SP","FH2G1C16A","FTRIM", 0.044],
    ["SR:C16-MG:G02A<HCM:H>Fld-SP","SR:C16-MG:G02A<VCM:H>Fld-SP","SQHG2C16A","SQ_TRIM", 0.2],
    ["SR:C16-MG:G02A<HCM:H2>Fld-SP","SR:C16-MG:G02A<VCM:H2>Fld-SP","CH2G2C16A","TRIMD", 0.3],
    ["SR:C16-MG:G04A<HCM:M1>Fld-SP","SR:C16-MG:G04A<VCM:M1>Fld-SP","CM1G4C16A","TRIMD", 0.2],
    ["SR:C16-MG:G04A<HCM:M1>Fld-SP","SR:C16-MG:G04A<VCM:M1>Fld-SP","FM1G4C16A","FTRIM", 0.044],
    ["SR:C16-MG:G04B<HCM:M1>Fld-SP","SR:C16-MG:G04B<VCM:M1>Fld-SP","CM1G4C16B","TRIMD", 0.3],
    ["SR:C16-MG:G06B<HCM:L2>Fld-SP","SR:C16-MG:G06B<VCM:L2>Fld-SP","CL2G6C16B","TRIMD", 0.2],
    ["SR:C16-MG:G06B<HCM:L1>Fld-SP","SR:C16-MG:G06B<VCM:L1>Fld-SP","CL1G6C16B","TRIMD", 0.2],
    ["SR:C17-MG:G01A<HCM:L1>Fld-SP","SR:C17-MG:G01A<VCM:L1>Fld-SP","FL1G1C17A","FTRIM", 0.044],
    ["SR:C17-MG:G01A<HCM:L2>Fld-SP","SR:C17-MG:G01A<VCM:L2>Fld-SP","FL2G1C17A","FTRIM", 0.044],
    ["SR:C17-MG:G02A<HCM:L1>Fld-SP","SR:C17-MG:G02A<VCM:L1>Fld-SP","CL1G2C17A","TRIMD", 0.2],
    ["SR:C17-MG:G02A<HCM:L2>Fld-SP","SR:C17-MG:G02A<VCM:L2>Fld-SP","CL2G2C17A","TRIMD", 0.2],
    ["SR:C17-MG:G04A<HCM:M>Fld-SP","SR:C17-MG:G04A<VCM:M>Fld-SP","SQMG4C17A","SQ_TRIM", 0.2],
    ["SR:C17-MG:G04A<HCM:M1>Fld-SP","SR:C17-MG:G04A<VCM:M1>Fld-SP","FM1G4C17A","FTRIM", 0.044],
    ["SR:C17-MG:G04B<HCM:M1>Fld-SP","SR:C17-MG:G04B<VCM:M1>Fld-SP","CM1G4C17B","TRIMD", 0.3],
    ["SR:C17-MG:G06B<HCM:H2>Fld-SP","SR:C17-MG:G06B<VCM:H2>Fld-SP","CH2G6C17B","TRIMD", 0.3],
    ["SR:C17-MG:G06B<HCM:H1>Fld-SP","SR:C17-MG:G06B<VCM:H1>Fld-SP","CH1G6C17B","TRIMD", 0.2],
    ["SR:C18-MG:G01A<HCM:H1>Fld-SP","SR:C18-MG:G01A<VCM:H1>Fld-SP","FH1G1C18A","FTRIM", 0.044],
    ["SR:C18-MG:G01A<HCM:H2>Fld-SP","SR:C18-MG:G01A<VCM:H2>Fld-SP","FH2G1C18A","FTRIM", 0.044],
    ["SR:C18-MG:G02A<HCM:H>Fld-SP","SR:C18-MG:G02A<VCM:H>Fld-SP","SQHG2C18A","SQ_TRIM", 0.2],
    ["SR:C18-MG:G02A<HCM:H2>Fld-SP","SR:C18-MG:G02A<VCM:H2>Fld-SP","CH2G2C18A","TRIMD", 0.3],
    ["SR:C18-MG:G04A<HCM:M1>Fld-SP","SR:C18-MG:G04A<VCM:M1>Fld-SP","CM1G4C18A","TRIMD", 0.2],
    ["SR:C18-MG:G04A<HCM:M1>Fld-SP","SR:C18-MG:G04A<VCM:M1>Fld-SP","FM1G4C18A","FTRIM", 0.044],
    ["SR:C18-MG:G04B<HCM:M1>Fld-SP","SR:C18-MG:G04B<VCM:M1>Fld-SP","CM1G4C18B","TRIMD", 0.3],
    ["SR:C18-MG:G06B<HCM:L2>Fld-SP","SR:C18-MG:G06B<VCM:L2>Fld-SP","CL2G6C18B","TRIMD", 0.2],
    ["SR:C18-MG:G06B<HCM:L1>Fld-SP","SR:C18-MG:G06B<VCM:L1>Fld-SP","CL1G6C18B","TRIMD", 0.2],
    ["SR:C19-MG:G01A<HCM:L1>Fld-SP","SR:C19-MG:G01A<VCM:L1>Fld-SP","FL1G1C19A","FTRIM", 0.044],
    ["SR:C19-MG:G01A<HCM:L2>Fld-SP","SR:C19-MG:G01A<VCM:L2>Fld-SP","FL2G1C19A","FTRIM", 0.044],
    ["SR:C19-MG:G02A<HCM:L1>Fld-SP","SR:C19-MG:G02A<VCM:L1>Fld-SP","CL1G2C19A","TRIMD", 0.2],
    ["SR:C19-MG:G02A<HCM:L2>Fld-SP","SR:C19-MG:G02A<VCM:L2>Fld-SP","CL2G2C19A","TRIMD", 0.2],
    ["SR:C19-MG:G04A<HCM:M>Fld-SP","SR:C19-MG:G04A<VCM:M>Fld-SP","SQMG4C19A","SQ_TRIM", 0.2],
    ["SR:C19-MG:G04A<HCM:M1>Fld-SP","SR:C19-MG:G04A<VCM:M1>Fld-SP","FM1G4C19A","FTRIM", 0.044],
    ["SR:C19-MG:G04B<HCM:M1>Fld-SP","SR:C19-MG:G04B<VCM:M1>Fld-SP","CM1G4C19B","TRIMD", 0.3],
    ["SR:C19-MG:G06B<HCM:H2>Fld-SP","SR:C19-MG:G06B<VCM:H2>Fld-SP","CH2G6C19B","TRIMD", 0.3],
    ["SR:C19-MG:G06B<HCM:H1>Fld-SP","SR:C19-MG:G06B<VCM:H1>Fld-SP","CH1G6C19B","TRIMD", 0.2],
    ["SR:C20-MG:G01A<HCM:H1>Fld-SP","SR:C20-MG:G01A<VCM:H1>Fld-SP","FH1G1C20A","FTRIM", 0.044],
    ["SR:C20-MG:G01A<HCM:H2>Fld-SP","SR:C20-MG:G01A<VCM:H2>Fld-SP","FH2G1C20A","FTRIM", 0.044],
    ["SR:C20-MG:G02A<HCM:H>Fld-SP","SR:C20-MG:G02A<VCM:H>Fld-SP","SQHG2C20A","SQ_TRIM", 0.2],
    ["SR:C20-MG:G02A<HCM:H2>Fld-SP","SR:C20-MG:G02A<VCM:H2>Fld-SP","CH2G2C20A","TRIMD", 0.3],
    ["SR:C20-MG:G04A<HCM:M1>Fld-SP","SR:C20-MG:G04A<VCM:M1>Fld-SP","CM1G4C20A","TRIMD", 0.2],
    ["SR:C20-MG:G04A<HCM:M1>Fld-SP","SR:C20-MG:G04A<VCM:M1>Fld-SP","FM1G4C20A","FTRIM", 0.044],
    ["SR:C20-MG:G04B<HCM:M1>Fld-SP","SR:C20-MG:G04B<VCM:M1>Fld-SP","CM1G4C20B","TRIMD", 0.3],
    ["SR:C20-MG:G06B<HCM:L2>Fld-SP","SR:C20-MG:G06B<VCM:L2>Fld-SP","CL2G6C20B","TRIMD", 0.2],
    ["SR:C20-MG:G06B<HCM:L1>Fld-SP","SR:C20-MG:G06B<VCM:L1>Fld-SP","CL1G6C20B","TRIMD", 0.2],
    ["SR:C21-MG:G01A<HCM:L1>Fld-SP","SR:C21-MG:G01A<VCM:L1>Fld-SP","FL1G1C21A","FTRIM", 0.044],
    ["SR:C21-MG:G01A<HCM:L2>Fld-SP","SR:C21-MG:G01A<VCM:L2>Fld-SP","FL2G1C21A","FTRIM", 0.044],
    ["SR:C21-MG:G02A<HCM:L1>Fld-SP","SR:C21-MG:G02A<VCM:L1>Fld-SP","CL1G2C21A","TRIMD", 0.2],
    ["SR:C21-MG:G02A<HCM:L2>Fld-SP","SR:C21-MG:G02A<VCM:L2>Fld-SP","CL2G2C21A","TRIMD", 0.2],
    ["SR:C21-MG:G04A<HCM:M>Fld-SP","SR:C21-MG:G04A<VCM:M>Fld-SP","SQMG4C21A","SQ_TRIM", 0.2],
    ["SR:C21-MG:G04A<HCM:M1>Fld-SP","SR:C21-MG:G04A<VCM:M1>Fld-SP","FM1G4C21A","FTRIM", 0.044],
    ["SR:C21-MG:G04B<HCM:M1>Fld-SP","SR:C21-MG:G04B<VCM:M1>Fld-SP","CM1G4C21B","TRIMD", 0.3],
    ["SR:C21-MG:G06B<HCM:H2>Fld-SP","SR:C21-MG:G06B<VCM:H2>Fld-SP","CH2G6C21B","TRIMD", 0.3],
    ["SR:C21-MG:G06B<HCM:H1>Fld-SP","SR:C21-MG:G06B<VCM:H1>Fld-SP","CH1G6C21B","TRIMD", 0.2],
    ["SR:C22-MG:G01A<HCM:H1>Fld-SP","SR:C22-MG:G01A<VCM:H1>Fld-SP","FH1G1C22A","FTRIM", 0.044],
    ["SR:C22-MG:G01A<HCM:H2>Fld-SP","SR:C22-MG:G01A<VCM:H2>Fld-SP","FH2G1C22A","FTRIM", 0.044],
    ["SR:C22-MG:G02A<HCM:H>Fld-SP","SR:C22-MG:G02A<VCM:H>Fld-SP","SQHG2C22A","SQ_TRIM", 0.2],
    ["SR:C22-MG:G02A<HCM:H2>Fld-SP","SR:C22-MG:G02A<VCM:H2>Fld-SP","CH2G2C22A","TRIMD", 0.3],
    ["SR:C22-MG:G04A<HCM:M1>Fld-SP","SR:C22-MG:G04A<VCM:M1>Fld-SP","CM1G4C22A","TRIMD", 0.2],
    ["SR:C22-MG:G04A<HCM:M1>Fld-SP","SR:C22-MG:G04A<VCM:M1>Fld-SP","FM1G4C22A","FTRIM", 0.044],
    ["SR:C22-MG:G04B<HCM:M1>Fld-SP","SR:C22-MG:G04B<VCM:M1>Fld-SP","CM1G4C22B","TRIMD", 0.3],
    ["SR:C22-MG:G06B<HCM:L2>Fld-SP","SR:C22-MG:G06B<VCM:L2>Fld-SP","CL2G6C22B","TRIMD", 0.2],
    ["SR:C22-MG:G06B<HCM:L1>Fld-SP","SR:C22-MG:G06B<VCM:L1>Fld-SP","CL1G6C22B","TRIMD", 0.2],
    ["SR:C23-MG:G01A<HCM:L1>Fld-SP","SR:C23-MG:G01A<VCM:L1>Fld-SP","FL1G1C23A","FTRIM", 0.044],
    ["SR:C23-MG:G01A<HCM:L2>Fld-SP","SR:C23-MG:G01A<VCM:L2>Fld-SP","FL2G1C23A","FTRIM", 0.044],
    ["SR:C23-MG:G02A<HCM:L1>Fld-SP","SR:C23-MG:G02A<VCM:L1>Fld-SP","CL1G2C23A","TRIMD", 0.2],
    ["SR:C23-MG:G02A<HCM:L2>Fld-SP","SR:C23-MG:G02A<VCM:L2>Fld-SP","CL2G2C23A","TRIMD", 0.2],
    ["SR:C23-MG:G04A<HCM:M>Fld-SP","SR:C23-MG:G04A<VCM:M>Fld-SP","SQMG4C23A","SQ_TRIM", 0.2],
    ["SR:C23-MG:G04A<HCM:M1>Fld-SP","SR:C23-MG:G04A<VCM:M1>Fld-SP","FM1G4C23A","FTRIM", 0.044],
    ["SR:C23-MG:G04B<HCM:M1>Fld-SP","SR:C23-MG:G04B<VCM:M1>Fld-SP","CM1G4C23B","TRIMD", 0.3],
    ["SR:C23-MG:G06B<HCM:H2>Fld-SP","SR:C23-MG:G06B<VCM:H2>Fld-SP","CH2G6C23B","TRIMD", 0.3],
    ["SR:C23-MG:G06B<HCM:H1>Fld-SP","SR:C23-MG:G06B<VCM:H1>Fld-SP","CH1G6C23B","TRIMD", 0.2],
    ["SR:C24-MG:G01A<HCM:H1>Fld-SP","SR:C24-MG:G01A<VCM:H1>Fld-SP","FH1G1C24A","FTRIM", 0.044],
    ["SR:C24-MG:G01A<HCM:H2>Fld-SP","SR:C24-MG:G01A<VCM:H2>Fld-SP","FH2G1C24A","FTRIM", 0.044],
    ["SR:C24-MG:G02A<HCM:H>Fld-SP","SR:C24-MG:G02A<VCM:H>Fld-SP","SQHG2C24A","SQ_TRIM", 0.2],
    ["SR:C24-MG:G02A<HCM:H2>Fld-SP","SR:C24-MG:G02A<VCM:H2>Fld-SP","CH2G2C24A","TRIMD", 0.3],
    ["SR:C24-MG:G04A<HCM:M1>Fld-SP","SR:C24-MG:G04A<VCM:M1>Fld-SP","CM1G4C24A","TRIMD", 0.2],
    ["SR:C24-MG:G04A<HCM:M1>Fld-SP","SR:C24-MG:G04A<VCM:M1>Fld-SP","FM1G4C24A","FTRIM", 0.044],
    ["SR:C24-MG:G04B<HCM:M1>Fld-SP","SR:C24-MG:G04B<VCM:M1>Fld-SP","CM1G4C24B","TRIMD", 0.3],
    ["SR:C24-MG:G06B<HCM:L2>Fld-SP","SR:C24-MG:G06B<VCM:L2>Fld-SP","CL2G6C24B","TRIMD", 0.2],
    ["SR:C24-MG:G06B<HCM:L1>Fld-SP","SR:C24-MG:G06B<VCM:L1>Fld-SP","CL1G6C24B","TRIMD", 0.2],
    ["SR:C25-MG:G01A<HCM:L1>Fld-SP","SR:C25-MG:G01A<VCM:L1>Fld-SP","FL1G1C25A","FTRIM", 0.044],
    ["SR:C25-MG:G01A<HCM:L2>Fld-SP","SR:C25-MG:G01A<VCM:L2>Fld-SP","FL2G1C25A","FTRIM", 0.044],
    ["SR:C25-MG:G02A<HCM:L1>Fld-SP","SR:C25-MG:G02A<VCM:L1>Fld-SP","CL1G2C25A","TRIMD", 0.2],
    ["SR:C25-MG:G02A<HCM:L2>Fld-SP","SR:C25-MG:G02A<VCM:L2>Fld-SP","CL2G2C25A","TRIMD", 0.2],
    ["SR:C25-MG:G04A<HCM:M>Fld-SP","SR:C25-MG:G04A<VCM:M>Fld-SP","SQMG4C25A","SQ_TRIM", 0.2],
    ["SR:C25-MG:G04A<HCM:M1>Fld-SP","SR:C25-MG:G04A<VCM:M1>Fld-SP","FM1G4C25A","FTRIM", 0.044],
    ["SR:C25-MG:G04B<HCM:M1>Fld-SP","SR:C25-MG:G04B<VCM:M1>Fld-SP","CM1G4C25B","TRIMD", 0.3],
    ["SR:C25-MG:G06B<HCM:H2>Fld-SP","SR:C25-MG:G06B<VCM:H2>Fld-SP","CH2G6C25B","TRIMD", 0.3],
    ["SR:C25-MG:G06B<HCM:H1>Fld-SP","SR:C25-MG:G06B<VCM:H1>Fld-SP","CH1G6C25B","TRIMD", 0.2],
    ["SR:C26-MG:G01A<HCM:H1>Fld-SP","SR:C26-MG:G01A<VCM:H1>Fld-SP","FH1G1C26A","FTRIM", 0.044],
    ["SR:C26-MG:G01A<HCM:H2>Fld-SP","SR:C26-MG:G01A<VCM:H2>Fld-SP","FH2G1C26A","FTRIM", 0.044],
    ["SR:C26-MG:G02A<HCM:H>Fld-SP","SR:C26-MG:G02A<VCM:H>Fld-SP","SQHG2C26A","SQ_TRIM", 0.2],
    ["SR:C26-MG:G02A<HCM:H2>Fld-SP","SR:C26-MG:G02A<VCM:H2>Fld-SP","CH2G2C26A","TRIMD", 0.3],
    ["SR:C26-MG:G04A<HCM:M1>Fld-SP","SR:C26-MG:G04A<VCM:M1>Fld-SP","CM1G4C26A","TRIMD", 0.2],
    ["SR:C26-MG:G04A<HCM:M1>Fld-SP","SR:C26-MG:G04A<VCM:M1>Fld-SP","FM1G4C26A","FTRIM", 0.044],
    ["SR:C26-MG:G04B<HCM:M1>Fld-SP","SR:C26-MG:G04B<VCM:M1>Fld-SP","CM1G4C26B","TRIMD", 0.3],
    ["SR:C26-MG:G06B<HCM:L2>Fld-SP","SR:C26-MG:G06B<VCM:L2>Fld-SP","CL2G6C26B","TRIMD", 0.2],
    ["SR:C26-MG:G06B<HCM:L1>Fld-SP","SR:C26-MG:G06B<VCM:L1>Fld-SP","CL1G6C26B","TRIMD", 0.2],
    ["SR:C27-MG:G01A<HCM:L1>Fld-SP","SR:C27-MG:G01A<VCM:L1>Fld-SP","FL1G1C27A","FTRIM", 0.044],
    ["SR:C27-MG:G01A<HCM:L2>Fld-SP","SR:C27-MG:G01A<VCM:L2>Fld-SP","FL2G1C27A","FTRIM", 0.044],
    ["SR:C27-MG:G02A<HCM:L1>Fld-SP","SR:C27-MG:G02A<VCM:L1>Fld-SP","CL1G2C27A","TRIMD", 0.2],
    ["SR:C27-MG:G02A<HCM:L2>Fld-SP","SR:C27-MG:G02A<VCM:L2>Fld-SP","CL2G2C27A","TRIMD", 0.2],
    ["SR:C27-MG:G04A<HCM:M>Fld-SP","SR:C27-MG:G04A<VCM:M>Fld-SP","SQMG4C27A","SQ_TRIM", 0.2],
    ["SR:C27-MG:G04A<HCM:M1>Fld-SP","SR:C27-MG:G04A<VCM:M1>Fld-SP","FM1G4C27A","FTRIM", 0.044],
    ["SR:C27-MG:G04B<HCM:M1>Fld-SP","SR:C27-MG:G04B<VCM:M1>Fld-SP","CM1G4C27B","TRIMD", 0.3],
    ["SR:C27-MG:G06B<HCM:H2>Fld-SP","SR:C27-MG:G06B<VCM:H2>Fld-SP","CH2G6C27B","TRIMD", 0.3],
    ["SR:C27-MG:G06B<HCM:H1>Fld-SP","SR:C27-MG:G06B<VCM:H1>Fld-SP","CH1G6C27B","TRIMD", 0.2],
    ["SR:C28-MG:G01A<HCM:H1>Fld-SP","SR:C28-MG:G01A<VCM:H1>Fld-SP","FH1G1C28A","FTRIM", 0.044],
    ["SR:C28-MG:G01A<HCM:H2>Fld-SP","SR:C28-MG:G01A<VCM:H2>Fld-SP","FH2G1C28A","FTRIM", 0.044],
    ["SR:C28-MG:G02A<HCM:H>Fld-SP","SR:C28-MG:G02A<VCM:H>Fld-SP","SQHG2C28A","SQ_TRIM", 0.2],
    ["SR:C28-MG:G02A<HCM:H2>Fld-SP","SR:C28-MG:G02A<VCM:H2>Fld-SP","CH2G2C28A","TRIMD", 0.3],
    ["SR:C28-MG:G04A<HCM:M1>Fld-SP","SR:C28-MG:G04A<VCM:M1>Fld-SP","CM1G4C28A","TRIMD", 0.2],
    ["SR:C28-MG:G04A<HCM:M1>Fld-SP","SR:C28-MG:G04A<VCM:M1>Fld-SP","FM1G4C28A","FTRIM", 0.044],
    ["SR:C28-MG:G04B<HCM:M1>Fld-SP","SR:C28-MG:G04B<VCM:M1>Fld-SP","CM1G4C28B","TRIMD", 0.3],
    ["SR:C28-MG:G06B<HCM:L2>Fld-SP","SR:C28-MG:G06B<VCM:L2>Fld-SP","CL2G6C28B","TRIMD", 0.2],
    ["SR:C28-MG:G06B<HCM:L1>Fld-SP","SR:C28-MG:G06B<VCM:L1>Fld-SP","CL1G6C28B","TRIMD", 0.2],
    ["SR:C29-MG:G01A<HCM:L1>Fld-SP","SR:C29-MG:G01A<VCM:L1>Fld-SP","FL1G1C29A","FTRIM", 0.044],
    ["SR:C29-MG:G01A<HCM:L2>Fld-SP","SR:C29-MG:G01A<VCM:L2>Fld-SP","FL2G1C29A","FTRIM", 0.044],
    ["SR:C29-MG:G02A<HCM:L1>Fld-SP","SR:C29-MG:G02A<VCM:L1>Fld-SP","CL1G2C29A","TRIMD", 0.2],
    ["SR:C29-MG:G02A<HCM:L2>Fld-SP","SR:C29-MG:G02A<VCM:L2>Fld-SP","CL2G2C29A","TRIMD", 0.2],
    ["SR:C29-MG:G04A<HCM:M>Fld-SP","SR:C29-MG:G04A<VCM:M>Fld-SP","SQMG4C29A","SQ_TRIM", 0.2],
    ["SR:C29-MG:G04A<HCM:M1>Fld-SP","SR:C29-MG:G04A<VCM:M1>Fld-SP","FM1G4C29A","FTRIM", 0.044],
    ["SR:C29-MG:G04B<HCM:M1>Fld-SP","SR:C29-MG:G04B<VCM:M1>Fld-SP","CM1G4C29B","TRIMD", 0.3],
    ["SR:C29-MG:G06B<HCM:H2>Fld-SP","SR:C29-MG:G06B<VCM:H2>Fld-SP","CH2G6C29B","TRIMD", 0.3],
    ["SR:C29-MG:G06B<HCM:H1>Fld-SP","SR:C29-MG:G06B<VCM:H1>Fld-SP","CH1G6C29B","TRIMD", 0.2],
    ["SR:C30-MG:G01A<HCM:H1>Fld-SP","SR:C30-MG:G01A<VCM:H1>Fld-SP","FH1G1C30A","FTRIM", 0.044]]

class Orm:
    def __init__(self, bpm, trimsp, trimrb):
        self.__bpm = bpm[:]
        self.__trimsp = trimsp[:]
        self.__trimrb = trimrb[:]

        self.__npoints = 4

        self.__rawmatrix = None
        self.__m = None
        self.__mask = None

    def __meas_orbit_rm4(self, kickerpv, bpmpvlist, mask,
                         kref = 0.0, dkick = 1e-6, verbose = 0):
        """Measure the RM by change one kicker. 4 points method.
        """
        if not getattr(dkick, '__iter__', False):
            # not iterable ?
            pass
        kx0 = caget(kickerpv)
        ret = np.zeros((6, len(bpmpvlist)), 'd')
        tsleep = 20
        for j, bpm in enumerate(bpmpvlist):
            if mask[j]: ret[0,j] = 0
            else: ret[0,j] = caget(bpm)

        
        kstrength = [kx0, kx0-2*dkick, kx0-dkick, kx0+dkick, kx0+2*dkick, kx0]
        for i,kx in enumerate(kstrength[1:]):
            caput(kickerpv, kx)
            if verbose: 
                print "Setting trim: ", kickerpv, kx, caget(kickerpv)
            time.sleep(tsleep)
            for j,bpm in enumerate(bpmpvlist):
                if mask[j]: ret[i+1,j] = 0
                else: ret[i+1,j] = caget(bpm)
                print "  %4d" % j, bpm, ret[i+1,j]
                sys.stdout.flush()
            print ""
        # 4 points
        v = (-ret[4,:] + 8.0*ret[3,:] - 8*ret[2,:] + ret[1,:])/12.0/dkick
        
        # polyfit
        p, residuals, rank, singular_values, rcond = \
            np.polyfit(kstrength[1:-1], ret[1:-1,:], 1, full=True)
        print ""
        print "Shape:", np.shape(kstrength[1:-1]), np.shape(ret[1:-1,:])
        print "Shape:",np.shape(p), np.shape(residuals)

        for i in range(len(bpmpvlist)):
            if abs((v[i] - p[0, i])/v[i]) > .1:
                print kickerpv, bpmpvlist[i], v[i], p[0,i]
        
        return v, kstrength, ret

    def measure(self, bpm = None, trimsp = None, trimrb = None,
                coupled=False, verbose = 0):
        if bpm:
            self.__bpm = bpm[:]
        if trimsp:
            self.__trimsp = trimsp[:]
        if trimrb:
            self.__trimrb = trimrb[:]

        # 3d raw data
        self.__rawmatrix = np.zeros((self.__npoints+2, len(self.__bpm),
                                   len(self.__trimsp)), 'd')
        self.__mask = np.zeros((len(self.__bpm), len(self.__trimsp)))

        if not coupled:
            # mask out H-V term
            for i, bpm in enumerate(self.__bpm):
                for j,trim in enumerate(self.__trimsp):
                    if self.__bpm[i].find("Pos-X") > 0 and \
                            self.__trimsp[j].find("VCM") > 0:
                        self.__mask[i, j] = 1
                    if self.__bpm[i].find("Pos-Y") > 0 and \
                            self.__trimsp[j].find("HCM") > 0:
                        self.__mask[i, j] = 1
                    
        self.__rawkick = np.zeros((len(self.__trimsp), self.__npoints+2), 'd')
        self.__m = np.zeros((len(self.__bpm), len(self.__trimsp)), 'd')
        for i, trim in enumerate(self.__trimsp):
            kref = caget(self.__trimrb[i])
            #if True: print i, self.__trimsp[i], kref,
            v, kstrength, ret = self.__meas_orbit_rm4(
                trim, self.__bpm, mask = self.__mask[:,i], kref=kref,
                verbose=verbose)
            self.__rawkick[i, :] = kstrength[:]
            self.__rawmatrix[:,:,i] = ret[:,:]
            self.__m[:,i] = v[:]
            time.sleep(3)

    def save(self, filename, format = 'HDF5'):
        import h5py
        f = h5py.File(filename, 'w')
        dst = f.create_dataset("orm", data = self.__m)
        dst = f.create_dataset("bpm_pvrb", data = self.__bpm)
        dst = f.create_dataset("trim_pvsp", data = self.__trimsp)
        dst = f.create_dataset("trim_pvrb", data = self.__trimrb)

        grp = f.create_group("_rawdata_")
        dst = grp.create_dataset("matrix", data = self.__rawmatrix)
        dst = grp.create_dataset("kicker_sp", data = self.__rawkick)
        dst = grp.create_dataset("mask", data = self.__mask)

        f.close()

    def load(self, filename, format = 'HDF5'):
        import h5py
        f = h5py.File(filename, 'r')
        self.__m = f["orm"]
        self.__bpm = f["bpm_pvrb"]
        self.__trimsp = f["trim_pvsp"]
        self.__trimrb = f["trim_pvrb"]
        self.__rawmatrix = f["_rawdata_"]["matrix"]
        self.__rawkick   = f["_rawdata_"]["kicker_sp"]
        self.__mask      = f["_rawdata_"]["mask"]

    def checkLinearity(self):
        npoints, nbpm, ntrim = np.shape(self.__rawmatrix)
        #print npoints, nbpm, ntrim
        res = []
        n = 0
        for j in range(ntrim):
            #print j, self.__rawkick[0, 1:npoints-1]
            for i in range(nbpm):
                if self.__mask[i, j]: continue

                k = self.__rawkick[j, 1:npoints-1]
                m = self.__rawmatrix[1:npoints-1, i, j]
                p, residuals, rank, singular_values, rcond = \
                    np.polyfit(k, m, 1, full=True)
                #if residuals[0] > 1e-11:
                #    print "x [%f %f]" % (k[0], k[-1]), residuals, p[0], \
                #        " calc:", self.__m[i, j]
                if self.__bpm[i].find("Pos-X") > 0 and \
                        self.__trimrb[j].find("VCM") > 0:
                    continue

                if self.__bpm[i].find("Pos-Y") > 0 and \
                        self.__trimrb[j].find("HCM") > 0:
                    continue

                tag = 'o'
                if abs((p[0] - self.__m[i,j])/p[0]) > .1:
                    print "%8d: bpm %3d, trim %3d" % (n, i, j), \
                        self.__bpm[i], self.__trimrb[j]
                    print "        ", residuals, \
                        p[0], " calc:", self.__m[i, j]
                    tag = 'e'
                if True:
                    n = n + 1
                    t = np.linspace(min(k)*1e6, max(k)*1e6, 100)
                    plt.clf()
                    plt.plot(t, p[0]*t + p[1]*1e6, '-')
                    plt.plot(k*1e6, m*1e6, '-o')
                    #plt.annotate('A', xy=(self.__rawkick[j,0],
                    #                      self.__rawmatrix[0,i,j]),
                    #             xycoords='data')
                    #plt.annotate('B', xy=(self.__rawkick[j,-1],
                    #                      self.__rawmatrix[-1,i,j]),
                    #             xycoords='data')
                    #plt.annotate('%s\n%s' % (self.__bpm[i], self.__trimsp[j]),
                    #             xy = (min(k*1000), max(m*1000)),
                    #             xycoords='data', verticalalignment='top')
                    #plt.title("%s / %s" % (self.__bpm[i], self.__trimsp[j]))
                    plt.ylabel(self.__bpm[i] + "  x1e6")
                    plt.xlabel(self.__trimsp[j] + "  x1e6")
                    plt.savefig("orm-check-%07d-%s.png" % (n, tag))

                if tag == 'e':
                    f = open("test.sh", 'w')
                    f.write("#!/bin/bash\n")
                    for ki in range(npoints):
                        f.write("caput '%s' %e\n" % (self.__trimsp[j],  
                                                 self.__rawkick[j, ki]))
                        f.write("sleep 3\n")
                        f.write("caget '%s'\n" % self.__bpm[i])
                    f.close()

                if n > 10: return
                if p[0] < 1e-10: continue
                res.append(residuals[0])
        print len(res), np.average(res), np.var(res)

def measOrbitRm(bpm, trimsp, trimrb):
    """Measure the beta function by varying quadrupole strength"""
    print "EPICS_CA_MAX_ARRAY_BYTES:", os.environ['EPICS_CA_MAX_ARRAY_BYTES']
    print "EPICS_CA_ADDR_LIST      :", os.environ['EPICS_CA_ADDR_LIST']

    orm = Orm(bpm, trimsp, trimrb)
    orm.measure(verbose=1)
    orm.save("test.hdf5")

# testing ...

def measChromRm():
    pass

def __clearTrims():
    print "Clear trim strength, Waiting..."
    for i, d in enumerate(trim):
	print "%4d:%f" % (i,caget(d[0])),
        if i % 5 == 4: print ""

        caput(d[0], 0.0)
        caput(d[1], 0.0)
    time.sleep(2)
    print "DONE"

def test():
    x = []
    t0 = 1299032723.0
    for k in [.0, -2e-6, -1e-6, 1e-6, 2e-6, 0.]:
        caput('SR:C30-MG:G01A<VCM:H2>Fld-SP', k)
        t1 = time.time()
        x1 = caget('SR:C30-BI:G02A<BPM:H2>Pos-Y')
        for i in range(200):
            #time.sleep(4)
            #print time.time()
            x2 = caget('SR:C30-BI:G02A<BPM:H2>Pos-Y')
            #time.sleep(4)
            if abs(x2 - x1) > 1e-12:
                print k, "%4d" % i, time.time() - t1, x1
                break
            x1 = x2
            time.sleep(3)
            #t2 = caget('SR:C30-BI:G02A<BPM:H2>Pos-Y')
        #print k, t1, t2
        #x.append([k, t1, t2])
    print x


if __name__ == "__main__":
    #__clearTrims()
    #test()
    #sys.exit(0)

    # horizontal and vertical BPM
    nbpm, ntrim = len(bpmpv), len(trim)
    #nbpm, ntrim = 3, 1

    b = []
    for i in range(nbpm): 
        # horizontal and vertical
        b.append(bpmpv[i][0]) 
        b.append(bpmpv[i][1]) 

    ksp, krb = [], []
    for i in range(ntrim):
        # horizontal
        ksp.append(trim[i][0])
        krb.append(trim[i][0].replace("-SP", "-RB"))
        # vertical
        ksp.append(trim[i][1])
        krb.append(trim[i][1].replace("-SP", "-RB"))

    measOrbitRm(b, ksp, krb)
    #orm = Orm(b, ksp, krb)
    #orm.load("test.hdf5")
    #orm.checkLinearity()
    

